// 1. Создать конструктор для производства автомобилей.
//  Конструктор должен принимать марку автомобиля и возраст машины. 
//  Конструктор должен иметь метод, который возвращает марку, и второй метод, который возвращает год производства машины
//   (год текущий минус возраст машины, использовать Date для получения текущего года) 
//    ... const lexus = new Car(‘lexus’, 2); 
// lexus.получитьМарку(); // “Lexus” 
// lexus.получитьГодВыпуска(); // 2020 (2022 - 2);
//       Марка машины всегда должна возвращаться с большой буквы!

// 2. Написать конструктор, который умеет элементарно шифровать строки 
// (например, сделать из строки строку-перевертыш, или заменить все символы их цифровым представлением, или любой другой метод).
//  Конструктор при инициализации получает строку и имеет следующие методы:
// a. показать оригинальную строку (пустая строка, если все удалили)
// b. показать зашифрованную строку
// c.  стереть все данные - метод должен удалить все строки
// Строки не должны быть доступны через this, только с помощью методов.

// 3. Создать класс, который создает экземпляры, работающие со строкой и имеет следующие свойства и методы:
// a. свойство “строка” будет содержать строку
// b. методы для получения и установки строки
// c. метод для получения длины строки
// d. при вызове toString() вернуть строку
// e. при приведении объекта к числу вернуть длину строки
// const str = new КлассСтрока(‘test’); str.получить(); // ‘test’ +str; // 4 str.toString(); // ‘test’

// 1. Есть класс Planet 
// function Planet(name) {
//        this.name = name;
//        this.getName = function () {
//         return 'Planet name is ' + this.name;
//     } }
//  Создать наследника от Planet, который будет называться PlanetWithSatellite и будет принимать, кроме name, название спутника (satelliteName).
// Переопределите метод getName для PlanetWithSatellite так, чтобы он возвращал ту же самую строчку + дополнительный текст 'The satellite is' + satelliteName.  
// Например: var earth = new PlanetWithSatellite('earth', 'moon'); earth.getName(); // 'Planet name is earth. The satellite is moon’


// 2. Создайте класс “Здание” (пусть у него будет имя, количество этажей,  метод “получить количество этажей” и метод “установить  количество этажей”). 
// Создайте наследников этого класса:  классы “Жилой дом” и “Торговый центр”. 
// Используйте функциональное наследование  У жилого дома появится свойство “количество квартир на этаже”,
//  а метод “получить количество этажей” должен вернуть объект вида {этажи: 5, всегоКвартир: 5 * количествоКвартир}
// У торгового центра появится свойство “количество магазинов на этаже”, а метод “получить количество этажей” должен вернуть объект вида {этажи: 3, всегоМагазинов: 3 * количествоМагазинов}
//  От каждого класса создать экземпляр (дом, торговый центр)

// 3. Создать класс “Мебель” с базовыми свойствами “имя”, “цена” и методом “получить информацию” (метод должен вывести имя и цену в объекте).
//  Метод должен быть объявлен с помощью прототипов (Func.prototype...). 
//  Создать два экземпляра класса “Мебель”: экземпляр “ОфиснаяМебель” и “Мебель для дома”. 
//  Придумайте им по одному свойству, которые будут характерны только для этих экземпляров (например, для офисной мебели - наличие компьютерного стола или шредера). 
//  Метод “получить информацию” должен учитывать и добавленное вами новое свойство. 
//  Задача на переопределение метода у экземпляров класса.

// 4. Создать класс “Пользователь” с базовыми свойствами “имя”, “дата регистрации” и методом “получить информацию”
//  (метод должен вывести имя и дату регистрации в виде объекта). Метод должен быть объявлен с помощью прототипов (Func.prototype...)
// Создать два наследника класса “Пользователь”: класс “Админ” и класс “Гость”.
// У класса “Админ” должно быть дополнительное свойство “суперАдмин” (может быть true/false, должно быть скрытым).
// Свойства определяются в момент вызова конструктора. 
// У класса “Гость” должно быть свойство “срокДействия” (validDate, например - поле также должно быть скрытым), содержащее дату (например, одну неделю от момента регистрации). 
// У классов-наследников метод “получить информацию” должен так же содержать информацию о дополнительных свойствах (“суперАдмин” и “срокДействия”)

// 5. https://docs.google.com/document/d/1cGH2lxju-Au7mk1yHYx8Rtg_QIA_OuQhsJnUcQ7Ifks/edit прочитать и сделать задание
 
